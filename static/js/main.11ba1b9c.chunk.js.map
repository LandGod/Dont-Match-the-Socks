{"version":3,"sources":["Images/blackSock.png","Images/blueBlackArgyleSock.png","Images/blueWhiteDotSock.png","Images/greenStripeSock.png","Images/greyBlueArgyleSock.png","Images/greyPinkArgyleSock.png","Images/greyPurpleArgyleSock.png","Images/greyRedArgyleSock.png","Images/greyRedDotSock.png","Images/ojDotSock.png","Images/purpleStripeSock.png","Images/redDotSock.png","Images/yellowStripeSock.png","Images/greyPurpleDotSock.png","components/MatchCard.js","components/ScoreContainer.js","components/DefaultModal.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MatchCard","props","className","src","image","alt","onClick","clickHandler","id","StoreContainer","currentScore","highScore","highScoreStreak","highScoreStreakBest","DefaultModal","show","Modal","size","aria-labelledby","centered","Header","closeButton","Title","title","Body","text","Footer","Button","onHide","App","state","socks","require","clicked","perfectScoreStreak","perfectScoreStreakBest","showModal","modalTitle","modalText","shuffleSocks","filter","item","undefined","i","length","current","swapIndex","parseInt","Math","floor","random","swapWithThis","setState","selectSock","prevState","setModalShow","bool","this","ScoreContainer","map","sock","key","shuffle","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.11ba1b9c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/blackSock.418c7bb6.png\";","module.exports = __webpack_public_path__ + \"static/media/blueBlackArgyleSock.11699d2e.png\";","module.exports = __webpack_public_path__ + \"static/media/blueWhiteDotSock.77be3dca.png\";","module.exports = __webpack_public_path__ + \"static/media/greenStripeSock.afd152ae.png\";","module.exports = __webpack_public_path__ + \"static/media/greyBlueArgyleSock.539f7e4c.png\";","module.exports = __webpack_public_path__ + \"static/media/greyPinkArgyleSock.032f059b.png\";","module.exports = __webpack_public_path__ + \"static/media/greyPurpleArgyleSock.1ca13965.png\";","module.exports = __webpack_public_path__ + \"static/media/greyRedArgyleSock.e74ba886.png\";","module.exports = __webpack_public_path__ + \"static/media/greyRedDotSock.0f31f62b.png\";","module.exports = __webpack_public_path__ + \"static/media/ojDotSock.87b69727.png\";","module.exports = __webpack_public_path__ + \"static/media/purpleStripeSock.bfb1b60e.png\";","module.exports = __webpack_public_path__ + \"static/media/redDotSock.dee828a2.png\";","module.exports = __webpack_public_path__ + \"static/media/yellowStripeSock.19015bf6.png\";","module.exports = __webpack_public_path__ + \"static/media/greyPurpleDotSock.a59c8e1c.png\";","import React from \"react\";\n\nfunction MatchCard(props) {\n    return (\n\n        <div className=\"col-2 sock-card mb-3\">\n\n                <img className=\"img-fluid img-thumbnail rounded\" src={props.image} alt=\"Sock\" onClick={() => props.clickHandler(props.id)} />\n\n        </div>\n\n    );\n}\n\nexport default MatchCard;","import React from \"react\";\n\nfunction StoreContainer(props) {\n  return (\n    <div className=\"jumbotron jumbotron-fluid\">\n      <div className=\"container\">\n        <h1 className=\"display-4\">Don't Match the Socks!</h1>\n        <h4>Score:</h4>\n        <p className=\"lead\">\n          Current Score: <span id=\"current-score\">{props.currentScore}</span> |\n          High Score: <span id=\"high-score\">{props.highScore}</span> </p>\n        <p className=\"lead\">\n          Perfect Score Streak (Current): <span id=\"perfect-score-streak\">{props.highScoreStreak}</span> |\n          Perfect Score Streak (Best): <span id=\"perfect-score-streak\">{props.highScoreStreakBest}</span>\n\n        </p>\n      </div>\n    </div>\n  );\n}\nexport default StoreContainer;\n","import React from \"react\";\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal'\n\nfunction DefaultModal(props) {\n\n    // If the show prop isn't set to true, don't render anything\n    if (!props.show) {\n        return null;\n    };\n\n    // else render modal\n    return (\n\n        <Modal\n            {...props}\n            size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n        >\n            <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                    {props.title}\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <p>\n                    {props.text}\n                </p>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={props.onHide}>Okay</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport default DefaultModal;","import React, { Component } from \"react\";\n// import { BrowserRouter as Router, Route } from \"react-router-dom\";\n// import NavTabs from \"./components/NavTabs\";\n// import Home from \"./components/pages/Home\";\n// import About from \"./components/pages/About\";\n// import socks from \"./socks.json\"\nimport \"./App.css\";\nimport MatchCard from \"./components/MatchCard\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport ScoreContainer from \"./components/ScoreContainer\";\nimport DefaultModal from \"./components/DefaultModal\";\n\nclass App extends Component {\n  state = {\n    socks: [\n      {\n        id: 1,\n        image: require(\"./Images/blackSock.png\"),\n        clicked: false\n      },\n\n      {\n        id: 2,\n        image: require(\"./Images/blueBlackArgyleSock.png\"),\n        clicked: false\n      },\n\n      {\n        id: 3,\n        image: require(\"./Images/blueWhiteDotSock.png\"),\n        clicked: false\n      },\n\n      {\n        id: 4,\n        image: require(\"./Images/greenStripeSock.png\"),\n        clicked: false\n      },\n\n      {\n        id: 5,\n        image: require(\"./Images/greyBlueArgyleSock.png\"),\n        clicked: false\n      },\n\n      {\n        id: 6,\n        image: require(\"./Images/greyPinkArgyleSock.png\"),\n        clicked: false\n      },\n\n      {\n        id: 7,\n        image: require(\"./Images/greyPurpleArgyleSock.png\"),\n        clicked: false\n      },\n\n      {\n        id: 8,\n        image: require(\"./Images/greyRedArgyleSock.png\"),\n        clicked: false\n      },\n\n      {\n        id: 9,\n        image: require(\"./Images/greyRedDotSock.png\"),\n        clicked: false\n      },\n\n      {\n        id: 10,\n        image: require(\"./Images/ojDotSock.png\"),\n        clicked: false\n      },\n\n      {\n        id: 11,\n        image: require(\"./Images/purpleStripeSock.png\"),\n        clicked: false\n      },\n\n      {\n        id: 12,\n        image: require(\"./Images/redDotSock.png\"),\n        clicked: false\n      },\n\n      {\n        id: 13,\n        image: require(\"./Images/yellowStripeSock.png\"),\n        clicked: false\n      },\n\n      {\n        id: 14,\n        image: require(\"./Images/greyPurpleDotSock.png\"),\n        clicked: false\n      }\n    ],\n    currentScore: 0,\n    highScore: 0,\n    perfectScoreStreak: 0,\n    perfectScoreStreakBest: 0,\n    // Modal info:\n    showModal: false,\n    modalTitle: 'Error',\n    modalText: 'An unknown error occured'\n  };\n\n  componentDidMount() {\n    this.shuffleSocks();\n  }\n\n  shuffleSocks = () => {\n    const socks = this.state.socks.filter(item => item !== undefined);\n\n    for (let i = 0; i < socks.length; i++) {\n      let current = socks[i];\n      let swapIndex = parseInt(Math.floor(Math.random() * socks.length));\n      let swapWithThis = socks[swapIndex];\n\n      socks[i] = swapWithThis;\n      socks[swapIndex] = current;\n    }\n\n    this.setState({ socks });\n  };\n\n  selectSock = id => {\n\n    // Using set state with anonymous function pattern so that we can get the previous state as an argument to work with\n    this.setState(prevState => {\n\n      // First check which sock was clicked\n      for (let i = 0; i < prevState.socks.length; i++) {\n        if (prevState.socks[i] && prevState.socks[i].id === id) {\n\n          // If sock has already been clicked, game over, reset score\n          if (prevState.socks[i].clicked === true) {\n\n            // Reset all socks to unclicked\n            for (let i = 0; i < prevState.socks.length; i++) {\n              prevState.socks[i].clicked = false;\n            }\n\n            // Update state with altered info and reset score\n            // Also popup modal with game over info\n            return {\n              socks: prevState.socks,\n              currentScore: 0,\n              perfectScoreStreak: 0,\n              modalTitle: 'Game Over!',\n              modalText: \"Oh no, it looks like you selected one of the socks more than once. That's tantamount to a matching pair! Only a psychopath would match thier socks! Better start over from the begining. Press 'Okay' to try again.\",\n              showModal: true\n            }\n          }\n\n          // If sock has not already been clicked\n          else {\n            // Mark it as clicked\n            prevState.socks[i].clicked = true;\n\n            // If incrementing score would hit 14, then declare game won and increment high scores accordingly\n            if (this.state.currentScore === 13) {\n              for (let i = 0; i < prevState.socks.length; i++) {\n                prevState.socks[i].clicked = false;\n              }\n              prevState.currentScore = 0;\n              prevState.highScore = 14;\n              prevState.perfectScoreStreak += 1;\n              if (prevState.perfectScoreStreakBest < prevState.perfectScoreStreak) {\n                prevState.perfectScoreStreakBest = prevState.perfectScoreStreak\n              };\n\n              // Set modal info to reflect a win\n              prevState.modalTitle = 'You Win!';\n              prevState.modalText = \"Congratulations! You didn't match any socks. Way to go! Think you can keep your streak going? Hit 'Okay' to go again.\";\n              prevState.showModal = true;\n\n              return { prevState };\n            }\n\n            // If game would not end, then increment score (and high score if applicable) accordingly\n            else {\n              return {\n                socks: prevState.socks,\n                currentScore: prevState.currentScore + 1,\n                highScore:\n                  prevState.highScore < prevState.currentScore + 1\n                    ? prevState.currentScore + 1\n                    : prevState.highScore\n              };\n            }\n          }\n        }\n      }\n    });\n\n    // And no matter what else happens, always shuffle the order that the socks are displayed in\n    this.shuffleSocks();\n  };\n\n  setModalShow = bool => {\n\n    if (!bool) {\n      // Reset to default values & hide modal\n      this.setState({\n        modalTitle: 'Error',\n        modalText: 'An unknown error occured',\n        showModal: false\n      })\n    }\n\n    // Show modal, as is\n    else { this.setState({ showModal: true }) }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n\n        <DefaultModal\n          show={this.state.showModal}\n          title={this.state.modalTitle}\n          text={this.state.modalText}\n          onHide={() => this.setModalShow(false)}\n        />\n\n        <ScoreContainer\n          currentScore={this.state.currentScore}\n          highScore={this.state.highScore}\n          highScoreStreak={this.state.perfectScoreStreak}\n          highScoreStreakBest={this.state.perfectScoreStreakBest}\n        />\n        <h1>Don't match the socks!</h1>\n        <div className=\"container\">\n          <div className=\"row\">\n            {/* Rendering all socks */}\n            {this.state.socks\n              .map(sock => (\n                <MatchCard\n                  key={sock.id}\n                  id={sock.id}\n                  shuffle={this.shuffleSocks}\n                  image={sock.image}\n                  clickHandler={this.selectSock}\n                  clicked={sock.clicked}\n                />\n              ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}