{"version":3,"sources":["Images/blackSock.png","Images/blueBlackArgyleSock.png","Images/blueWhiteDotSock.png","Images/greenStripeSock.png","Images/greyBlueArgyleSock.png","Images/greyPinkArgyleSock.png","Images/greyPurpleArgyleSock.png","Images/greyRedArgyleSock.png","Images/greyRedDotSock.png","Images/ojDotSock.png","Images/purpleStripeSock.png","Images/redDotSock.png","Images/yellowStripeSock.png","Images/greyPurpleDotSock.png","components/MatchCard.js","components/ScoreContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MatchCard","props","className","src","image","alt","onClick","clickHandler","id","DefaultModal","currentScore","highScore","highScoreStreak","App","state","socks","require","clicked","perfectScoreStreak","shuffleSocks","filter","item","undefined","i","length","current","swapIndex","parseInt","Math","round","random","swapWithThis","setState","selectSock","console","log","prevState","ScoreContainer","this","map","sock","key","shuffle","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a5a9c0e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/blackSock.418c7bb6.png\";","module.exports = __webpack_public_path__ + \"static/media/blueBlackArgyleSock.11699d2e.png\";","module.exports = __webpack_public_path__ + \"static/media/blueWhiteDotSock.77be3dca.png\";","module.exports = __webpack_public_path__ + \"static/media/greenStripeSock.afd152ae.png\";","module.exports = __webpack_public_path__ + \"static/media/greyBlueArgyleSock.539f7e4c.png\";","module.exports = __webpack_public_path__ + \"static/media/greyPinkArgyleSock.032f059b.png\";","module.exports = __webpack_public_path__ + \"static/media/greyPurpleArgyleSock.1ca13965.png\";","module.exports = __webpack_public_path__ + \"static/media/greyRedArgyleSock.e74ba886.png\";","module.exports = __webpack_public_path__ + \"static/media/greyRedDotSock.0f31f62b.png\";","module.exports = __webpack_public_path__ + \"static/media/ojDotSock.87b69727.png\";","module.exports = __webpack_public_path__ + \"static/media/purpleStripeSock.bfb1b60e.png\";","module.exports = __webpack_public_path__ + \"static/media/redDotSock.dee828a2.png\";","module.exports = __webpack_public_path__ + \"static/media/yellowStripeSock.19015bf6.png\";","module.exports = __webpack_public_path__ + \"static/media/greyPurpleDotSock.a59c8e1c.png\";","import React from \"react\";\n\nfunction MatchCard(props) {\n    return (\n\n        <div className=\"col-2 sock-card mb-3\">\n\n                <img className=\"img-fluid img-thumbnail rounded\" src={props.image} alt=\"Sock\" onClick={() => props.clickHandler(props.id)} />\n\n        </div>\n\n    );\n}\n\nexport default MatchCard;","import React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { directive } from \"@babel/types\";\r\n\r\nfunction DefaultModal(props) {\r\n  return (\r\n    <div className=\"jumbotron jumbotron-fluid\">\r\n      <div className=\"container\">\r\n        <h1 className=\"display-4\">Score</h1>\r\n        <p className=\"lead\">\r\n          Current Score: <span id=\"current-score\">{props.currentScore}</span> \r\n          High Score: <span id=\"high-score\">{props.highScore}</span> \r\n          Perfect Score Streak: <span id=\"perfect-score-streak\">{props.highScoreStreak}</span>\r\n\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default DefaultModal;\r\n","import React, { Component } from \"react\";\n// import { BrowserRouter as Router, Route } from \"react-router-dom\";\n// import NavTabs from \"./components/NavTabs\";\n// import Home from \"./components/pages/Home\";\n// import About from \"./components/pages/About\";\n// import socks from \"./socks.json\"\nimport \"./App.css\";\nimport MatchCard from \"./components/MatchCard\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport DefaultModal from \"./components/Modal\";\nimport ScoreContainer from \"./components/ScoreContainer\";\n\nclass App extends Component {\n  state = {\n    socks: [\n      {\n        id: 1,\n        image: require(\"./Images/blackSock.png\"),\n        clicked: false\n      },\n\n      {\n        id: 2,\n        image: require(\"./Images/blueBlackArgyleSock.png\"),\n        clicked: false\n      },\n\n      {\n        id: 3,\n        image: require(\"./Images/blueWhiteDotSock.png\"),\n        clicked: false\n      },\n\n      {\n        id: 4,\n        image: require(\"./Images/greenStripeSock.png\"),\n        clicked: false\n      },\n\n      {\n        id: 5,\n        image: require(\"./Images/greyBlueArgyleSock.png\"),\n        clicked: false\n      },\n\n      {\n        id: 6,\n        image: require(\"./Images/greyPinkArgyleSock.png\"),\n        clicked: false\n      },\n\n      {\n        id: 7,\n        image: require(\"./Images/greyPurpleArgyleSock.png\"),\n        clicked: false\n      },\n\n      {\n        id: 8,\n        image: require(\"./Images/greyRedArgyleSock.png\"),\n        clicked: false\n      },\n\n      {\n        id: 9,\n        image: require(\"./Images/greyRedDotSock.png\"),\n        clicked: false\n      },\n\n      {\n        id: 10,\n        image: require(\"./Images/ojDotSock.png\"),\n        clicked: false\n      },\n\n      {\n        id: 11,\n        image: require(\"./Images/purpleStripeSock.png\"),\n        clicked: false\n      },\n\n      {\n        id: 12,\n        image: require(\"./Images/redDotSock.png\"),\n        clicked: false\n      },\n\n      {\n        id: 13,\n        image: require(\"./Images/yellowStripeSock.png\"),\n        clicked: false\n      },\n\n      {\n        id: 14,\n        image: require(\"./Images/greyPurpleDotSock.png\"),\n        clicked: false\n      }\n    ],\n    currentScore: 0,\n    highScore: 0,\n    perfectScoreStreak: 0\n  };\n\n  shuffleSocks = () => {\n    const socks = this.state.socks.filter(item => item !== undefined);\n\n    for (let i = 0; i < socks.length; i++) {\n      let current = socks[i];\n      let swapIndex = parseInt(Math.round(Math.random() * socks.length));\n      let swapWithThis = socks[swapIndex];\n\n      socks[i] = swapWithThis;\n      socks[swapIndex] = current;\n    }\n\n    this.setState({ socks });\n  };\n\n  selectSock = id => {\n    console.log(id);\n\n    this.setState(prevState => {\n      for (let i = 0; i < prevState.socks.length; i++) {\n        if (prevState.socks[i] && prevState.socks[i].id === id) {\n          console.log(prevState.socks[i].clicked);\n          if (prevState.socks[i].clicked === true) {\n            console.log(\"Game Over!\");\n          } else {\n            prevState.socks[i].clicked = true;\n            console.log(\"set one to true!\");\n            if (this.state.currentScore === 13) {\n              console.log(\"WIN!\");\n              for (let i = 0; i < prevState.socks.length; i++) {\n                prevState.socks[i].clicked = false;\n              }\n              prevState.currentScore = 0;\n              prevState.highScore = 14;\n              prevState.perfectScoreStreak += 1;\n\n              return { prevState };\n            } else {\n              return {\n                socks: prevState.socks,\n                currentScore: prevState.currentScore + 1,\n                highScore:\n                  prevState.highScore < prevState.currentScore + 1\n                    ? prevState.currentScore + 1\n                    : prevState.highScore\n              };\n            }\n          }\n        }\n      }\n    });\n\n    this.shuffleSocks();\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <ScoreContainer />\n        <h1>Don't match the socks!</h1>\n        <div className=\"container\">\n          <div className=\"row\">\n            {/* Having issues with undefined values being added to my sock array. Not sure what is causing that, but the filter is a stopgap for now */}\n            {this.state.socks\n              .filter(item => item !== undefined)\n              .map(sock => (\n                <MatchCard\n                  key={sock.id}\n                  id={sock.id}\n                  shuffle={this.shuffleSocks}\n                  image={sock.image}\n                  clickHandler={this.selectSock}\n                  clicked={sock.clicked}\n                />\n              ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}